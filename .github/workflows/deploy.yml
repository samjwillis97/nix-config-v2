name: "Deploy Nix configs"
on:
  workflow_dispatch: # allows manual triggering
  push:
    branches:
      - main
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false
jobs:
  comparisons:
    strategy:
      matrix:
        os: [ubuntu-latest]
        config:
          - mini-media-server

    runs-on: ${{ matrix.os }}

    env:
      CONFIG: ${{ matrix.config }}

    steps:
      - uses: actions/checkout@v5
      - uses: DeterminateSystems/nix-installer-action@main
      - name: Connect to Tailscale
        uses: tailscale/github-action@v3
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
      - name: Pin SSH host key for ${{ env.CONFIG }} (via Tailscale)
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Try to get the Tailscale IP; fallback to the MagicDNS name if you use it.
          # Replace tailnet domain if you rely on FQDN like mini-media-server.<tailnet>.ts.net
          HOST_SHORT="$CONFIG"
          HOST_FQDN=""
          if [ -n "${TAILSCALE_FQDN_SUFFIX:-}" ]; then
            HOST_FQDN="${HOST_SHORT}.${TAILSCALE_FQDN_SUFFIX}"
          fi

          IP4="$(tailscale ip -4 "${HOST_SHORT}" || true)"
          IP6="$(tailscale ip -6 "${HOST_SHORT}" || true)"

          # Build scan list with unique, non-empty tokens
          SCAN_LIST=()
          for H in "$HOST_SHORT" "$HOST_FQDN" "$IP4" "$IP6"; do
            [ -n "$H" ] && SCAN_LIST+=("$H")
          done

          # Scan only ed25519 (adjust if your server uses another type)
          ssh-keyscan -T 20 -t ed25519 -H "${SCAN_LIST[@]}" >> ~/.ssh/known_hosts 2>/dev/null
          chmod 600 ~/.ssh/known_hosts

          # Make both ssh and nix use the same strict policy + file
          export KH=~/.ssh/known_hosts
          echo "NIX_SSHOPTS=-o StrictHostKeyChecking=yes -o UserKnownHostsFile=${KH}" >> $GITHUB_ENV
          echo "DEPLOY_SSH_OPTS=-o StrictHostKeyChecking=yes -o UserKnownHostsFile=${KH}" >> $GITHUB_ENV

      - name: Deploy (${{ env.CONFIG }})
        id: deploy
        shell: bash
        run: |
          # Prefer nix run over nix-env -i
          nix run nixpkgs#deploy-rs -- --skip-checks .#${CONFIG}
